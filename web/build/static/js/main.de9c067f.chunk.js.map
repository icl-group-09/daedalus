{"version":3,"sources":["components/gpu/RenderType.tsx","components/gpu/ThreeHandler.ts","components/gpu/GPUView.tsx","components/menu/PcdMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RenderType","ThreeHandler","width","height","renderer","THREE","scene","camera","this","initCamera","initRenderer","initControls","position","set","add","setPixelRatio","window","devicePixelRatio","setSize","controls","OrbitControls","domElement","addEventListener","renderScene","minDistance","maxDistance","aspect","domElem","pcdFilename","mode","pcdPointSize","children","length","removeChild","appendChild","PCD","loadPCD","HM","isHeatMap","PCDLoader","load","points","numPoints","geometry","attributes","count","minY","maxY","i","y","array","range","colors","j","heightProp","color","push","r","g","b","setAttribute","material","size","vertexColors","center","rotateX","Math","PI","render","GPUView","graphicsHandler","pcdRenderType","css","elemRef","useRef","useEffect","renderPCD","current","resizeRenderer","className","style","ref","PcdMenu","pcd","setPcd","Box","sx","minWidth","FormControl","fullWidth","InputLabel","id","Select","labelId","value","label","onChange","event","target","map","MenuItem","EnableGPUContext","createContext","dummyGraphicsHandler","App","useState","pointSize","setPointSize","w","setW","h","setH","funkyFunc","x","pcdName","pointCloudType","setPointCloudType","useContext","textAlign","display","flexDirection","alignItems","justifyContent","onClick","axis","xmax","xstep","xmin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de9c067f.chunk.js","sourcesContent":["export enum RenderType {\n    PCD,\n    HM\n  }","import * as THREE from \"three\";\nimport { PCDLoader } from \"three/examples/jsm/loaders/PCDLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport {RenderType} from \"./RenderType\"\n\nexport interface IGraphicsHandler {\n  renderPCD(domElement: HTMLElement, pcdFilename: String, mode: RenderType, pcdPointSize: number): void;\n  resizeRenderer(width: number, height: number): void;\n}\n\nexport class ThreeHandler implements IGraphicsHandler {\n  private readonly renderer: THREE.WebGLRenderer = new THREE.WebGLRenderer();\n  private readonly scene: THREE.Scene = new THREE.Scene();\n  private camera: THREE.PerspectiveCamera;\n\n  constructor(width: number, height: number) {\n    this.camera = new THREE.PerspectiveCamera(30, width / height, 0.01, 40);\n    this.initCamera();\n    this.initRenderer(width, height);\n    this.initControls();\n  }\n\n  private initCamera() {\n    this.camera.position.set(0, 0, 1);\n    this.scene.add(this.camera);\n  }\n\n  private initRenderer(width: number, height: number) {\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(width, height);\n  }\n\n  private initControls() {\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    controls.addEventListener(\"change\", () => {\n      this.renderScene();\n    });\n    controls.minDistance = 0.5;\n    controls.maxDistance = 10;\n  }\n\n  resizeRenderer(width: number, height: number) {\n    this.camera.aspect = width / height;\n    this.renderer.setSize(width, height);\n  }\n\n  renderPCD(domElem: HTMLElement, pcdFilename: string, mode: RenderType, pcdPointSize: number): void {\n    // Mount the GPU view to the HTML\n    const children = domElem.children;\n    if (children.length > 0) {\n      domElem.removeChild(children[children.length - 1]);\n    }\n    domElem.appendChild(this.renderer.domElement);\n\n    switch(mode){\n      case RenderType.PCD:{\n        this.loadPCD(pcdFilename, false, pcdPointSize);\n        break;\n      }\n      case RenderType.HM:{\n        this.loadPCD(pcdFilename, true, pcdPointSize);\n        break;\n      }\n    }\n\n    this.renderScene();\n  }\n\n  private loadPCD(pcdFilename: string, isHeatMap: boolean, pcdPointSize: number) {\n    const loader = new PCDLoader();\n    loader.load(`/getPcd/${pcdFilename}.pcd`, points => {\n      if (isHeatMap) {\n        const numPoints = points.geometry.attributes.position.count;\n        var minY = 1000000;\n        var maxY = -1000000;\n        for (var i = 0; i < numPoints; i++) {\n          const y = points.geometry.attributes.position.array[i * 3 + 1];\n\n          if (y < minY) {\n            minY = y;\n          }\n\n          if (y > maxY) {\n            maxY = y;\n          }\n        }\n\n        const range = maxY - minY;\n\n        const colors = [];\n        for (var j = 0; j < numPoints; j++) {\n          const y = points.geometry.attributes.position.array[j * 3 + 1];\n          const heightProp = (y - minY) / range;\n          const color = new THREE.Color(1*(1-heightProp), 0, 1 * heightProp);\n          colors.push(color.r, color.g, color.b);\n        }\n        points.geometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3));\n      }\n      points.material = new THREE.PointsMaterial( { size: pcdPointSize, vertexColors: isHeatMap } )\n      points.geometry.center();\n      points.geometry.rotateX(Math.PI);\n      this.scene.add(points);\n      this.renderScene();\n    });\n  }\n\n  private renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n","import React from \"react\";\nimport { IGraphicsHandler } from \"./ThreeHandler\";\nimport { useEffect, useRef } from \"react\";\nimport {RenderType} from \"./RenderType\"\n\ntype GPUViewProps = {\n  width: number;\n  height: number;\n  graphicsHandler: IGraphicsHandler;\n  pcdFilename: string;\n  pcdRenderType: RenderType\n  pcdPointSize: number\n};\n\nconst GPUView = ({\n  width,\n  height,\n  graphicsHandler,\n  pcdFilename,\n  pcdRenderType,\n  pcdPointSize\n}: GPUViewProps) => {\n  const css = { width: `${width}px`, height: `${height}px` };\n\n  const elemRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Run the first time this component renders\n    graphicsHandler.renderPCD(elemRef.current!, pcdFilename, pcdRenderType, pcdPointSize);\n    graphicsHandler.resizeRenderer(width, height);\n  });\n\n  return (\n    <div className=\"gpu-view\" style={css}>\n      <div className=\"gpu-view-frame\" ref={elemRef}></div>\n    </div>\n  );\n};\n\nexport default GPUView;\n","import React from \"react\";\nimport { Dispatch, SetStateAction } from 'react';\nimport Box from \"@mui/material/Box\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\n\ntype PcdMenuProps = {\n  pcd: string;\n  setPcd: Dispatch<SetStateAction<string>>;\n};\n\nconst PcdMenu = ({pcd, setPcd,}: PcdMenuProps) => {\n  \n  const handleChange = (event: SelectChangeEvent) => {\n    setPcd(event.target.value as string);\n  };\n\n  var pcdList = [\"online\", \"Rf10\", \"frame_00023\"];\n\n  return (\n    <Box sx={{ minWidth: 120 }}>\n      <FormControl fullWidth>\n        <InputLabel id='demo-simple-select-label'>PCD</InputLabel>\n        <Select\n          labelId='demo-simple-select-label'\n          id='demo-simple-select'\n          value={pcd}\n          label='Age'\n          onChange={handleChange}\n        >\n          {pcdList.map((pcd, i) => {\n            return (\n              <MenuItem key={i} value={pcd}>\n                {pcd}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n}\nexport default PcdMenu;","import React from \"react\";\nimport \"./App.css\";\nimport { IGraphicsHandler, ThreeHandler } from \"./components/gpu/ThreeHandler\";\nimport { useState, createContext, useContext } from \"react\";\nimport GPUView from \"./components/gpu/GPUView\";\nimport PcdMenu from \"./components/menu/PcdMenu\";\nimport Slider from 'react-input-slider';\n\nimport {RenderType} from \"./components/gpu/RenderType\"\n\nexport const EnableGPUContext = createContext(true);\n\nconst dummyGraphicsHandler: IGraphicsHandler = {\n  renderPCD: (domElement: HTMLElement, pcdFilename: String) => {},\n  resizeRenderer: (width: number, height: number) => {},\n};\n\nfunction App() {\n  // These are here just for the demo. Will be removed\n  const [pcd, setPcd] = useState(\"online\");\n  const [pointSize, setPointSize] = useState(0.003);\n  const [w, setW] = useState(800);\n  const [h, setH] = useState(800);\n  (window as any).funkyFunc = (x: number, y: number) => {\n    setW(x);\n    setH(y);\n  };\n\n  (window as any).setPcd = (pcdName: string) => {\n    setPcd(pcdName);\n  };\n\n  const [pointCloudType, setPointCloudType] = useState(RenderType.PCD);\n\n  const ClickPCD = () => {\n    setPointCloudType(RenderType.PCD);\n  };\n\n  const ClickHM = () => {\n    setPointCloudType(RenderType.HM);\n  };\n\n  const cssCenter = {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  } as const;\n\n  const graphicsHandler = !useContext(EnableGPUContext)\n    ? dummyGraphicsHandler\n    : new ThreeHandler(w, h);\n\n  return (\n    <div className=\"App\" style={cssCenter}>\n      <h1>Welcome to Daedalus!</h1>\n      <div>\n        <button onClick={ClickPCD}>Show Point Cloud</button>\n        <button onClick={ClickHM}>Show Heat Map</button>\n        <button>Show 2D Map</button>\n      </div>\n      <div>\n        <PcdMenu pcd={pcd} setPcd={setPcd}/>\n          <Slider\n            axis=\"x\"\n            xmax={0.01}\n            xstep={0.0005}\n            xmin={0.001}\n            x={pointSize}\n            onChange={({ x }) => setPointSize(x)}\n          />\n      </div>\n\n      <GPUView\n        width={w}\n        height={h}\n        graphicsHandler={graphicsHandler}\n        pcdFilename={pcd}\n        pcdRenderType = {pointCloudType}\n        pcdPointSize={pointSize}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}